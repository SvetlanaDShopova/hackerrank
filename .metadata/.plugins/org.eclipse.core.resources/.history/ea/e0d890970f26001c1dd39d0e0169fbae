/**
 * 
 */
package com.sds.challenges;



import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author svetl
 *
 */
public class TeamSkils {

    /**
     * @param args
     */
    public static void main(String[] args) {
        List<Integer> skils = List.of(5,1,2,1,4,5);
        countMaximumTeam(skils,3,2);
    }
    
    public static int countMaximumTeam(List<Integer> skill, int teamSize, int maxDiff) {
        int numberTeams = 0;
        if(skill.size() == teamSize ) {
            Integer min = skill.stream().mapToInt(v ->v).min().orElse(0);
            Integer max = skill.stream().mapToInt(v ->v).min().orElse(0);
            
            if((max-min) <=  maxDiff) {
                numberTeams = 1;
            }            
        }
        
        List<List<Integer>> finalList = new ArrayList<>();
        finalList = perm( skill,0);
        
        for(List<Integer> l : finalList) {
            System.out.println();
            l.forEach(System.out::print);
        }
        
        return numberTeams;
    }
    
    private static List<List<Integer>> perm( List<Integer> list, int counter) {
        if(counter == list.size()) {
            return new ArrayList<>();
        }
        
        int val = list.get(counter);
        
        List<List<Integer>> subset = perm(list, counter + 1);
        List<List<Integer>> finalList = new ArrayList<>();
        
        finalList.add(Arrays.asList(val));
        finalList.addAll(subset);
        
//        for(List<Integer> subsetVal: subset) {
//            for(Integer subsV : subsetVal){
//                
//            }
//        }
        
        
        return finalList;
    }

}
